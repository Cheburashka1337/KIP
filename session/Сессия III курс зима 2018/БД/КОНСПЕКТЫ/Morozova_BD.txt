Морозова Мария Владимировна

Основные понятия баз данных

Система управления базами данных - программное обеспечение, с помощью которого пользователи могут определять, 
создавать и поддерживать базу данных. А так же осуществлять к ней контролируемый доступ.

Различают 2 вида системы управления базами данных:
1. СУБД общего назначения
2. СУБД спец. назначения

Признаки СУБД общего назначения:
1) Неориентированны на какую-либо конктретную предметную область - они универсальны
2) Обладают средствами настройки на работу с конкретной СУБД

Характеристики:
+ сокращает сроки разработки, экономит ьрудовые ресурсы, даёт возможность достигнуть приемлемого уровня
- иногда не позволяют добится требуемых характеристик производительности и/или 
удовлетворить заданные ограничения по объему памяти.

Спец СУБД создают, когда общие СУБД не позволяют добиться требуемых характеристик производительности
или вписаться в ограничения доступной памяти

Логическая модель данных - прототип будущей базы данных. Она обисывает понятия, используемые в данной предметной 
области и взаимосвязь, а так же ограничения на данные налагаемые предметной областью

Концептуальный вывод лог модели данных предопределеяют уровень эффективности в той или иной программной реализации БД

Модель данных состоит из:
1. Структура данных - описывает точку зрения пользователя на представление данных
2. Набор допустимых операций - выполняемых на структуре данных
3. Ограничение целостности - механизм поддержания соответственности предметной области на основе заранее описанных правил.

Логические модели (виды):
1. Иерархическая
2. Сетевая модель данных
3. Реляционная моделль данных
4. Многомерная модель данных

Уровни мод данных

Описание предметной области
\/
Датологическая модель данных
\/
Физическая модель данных

Инфорологическая модель ПрО включает описание структуры динамики ПрО

Проектирование состоит из
1. Определение границ предметной области (ПрО)
2. Анализ ПрО:
	сущность - объект ПрО, сведения о котором необходимо хранить в БД
	атрибут - характеристика сущности
	связь - устойчивая ассоциация между сущностями
3. Методы Анализа
	*функциональный
	*предметный
	*метод сущность - связь

Построить БД по типуц примера

Операции релиационной алгебры:
1. U - объединение (Union): все без повторений
2. \ - Разность (Difference): убрать то, что есть во втором
3. n - пересечение (Interaction): общее, что есть
4. _\_ - Симметричесакая разность (Symmecal Difference): то, что не совпадает
5. x - Расширенное декартово произведение (Extended Cartesian Product): соединение с порядком
6. 0~ - Выборка или Селекция (Selection): выбр по условию
7. || - Соединение (Join): соединение с совпадениями
8. \|/ - проекция (типо стрелка): вывод без повторений строк
9. - - Деление: выбор нужного по запросу


Применяеются только для таблиц с одинаковой структурой

Операция объеденения 

sp1 = SN      PN      COLOUR
      Джонс   гайки   черные
      Джонс   болты   черные
      Джонс   гайки   красные
      Смит    болты   черные

sp2 = SN      PN      Colour
      Джонс   болты   черные
      Джонс   гайки   красные
      Браун   болты   чёрные

sp2 u sp3 =
      SN      PN      COLOUR
      Джонс   гайки   черные
      Джонс   болты   черные
      Джонс   гайки   красные
      Смит    болты   черные
      Браун   болты   чёрные

sp1 n sp2 = 
      SN      PN      COLOUR
      Джонс   болты   черные
      Джонс   гайки   красные

sp1 / sp2 = 
      SN      PN      COLOUR
      Браун   болты   чёрные

sp1 _\_ sp2 = 
      SN      PN      COLOUR
      Джонс   гайки   черные
      Джонс   болты   черные
      Браун   болты   чёрные

S = SN
    Смит
    Джонс

L = LETR      YEAR
    Цены      98
    Квота     99

S x L = 
    SN     LETR      YEAR
    Смит   Цены      98
    Джонс  Квота     99

Нормализация баз данных

Нормализация:
1. Устранение аномалий (вставки, изменение, удаления)
2. Повышение производительности ()


Запросы SELECT

SELECT [DISTINCT] <Список столб>
FROM <список таблиц>
[WHERE <условие выборки>]
[GROUP BY <список атрибутов>] - задается список полей группировки результата. Позволяет выделить из отдельного столбца подмножество знчений и применить к нему агрегатную функцию.
[ORDER BY <список атрибутов>] - задается список полей упорядовачивания результатов, список полей упорядовачивания резуьтата (порядок сортировки) 
[DESC] - по убыванию
[HAVING <условие>] - задаются предекаты условия селекции, накладываемые на каждую группу. Используется для фильтрации груп. В нем задаются критерии, по результатам которого исключаются определенные группы.
[UNION <вырважение с оператором SELECT>]

1. Требуется найти самый крупный заказ для каждого продавца
SELECT snum, MAX(amt) 
FROM Orders 
GROUP BY snum;

2. Самые крупные заказы продовцов за каждый день
SELECT snum, odate, MAX(amt)
FROM Orders
GROUP BY snum, odate;

3003  767.19 10/3/2000 2001 1001
3002 1900.10 10/3/2000 2007 1004
3005 5160.45 10/3/2000 2003 1002
3006 1098.16 10/3/2000 2008 1007
3009 1713.23 10/4/2000 2002 1003
3007   75.75 10/4/2000 2004 1002
3008 4723.00 10/5/2000 2006 1001
3010 1309.95 10/6/2000 2004 1002
3011 9891.85 10/6/2000 2006 1001

3.
SELECT snum, odate, MAX(amt)
FROM Orders
HAVING MAX(amt) > 3000.00

3008 4723.00 10/5/2000 2006 1001
3011 9891.85 10/6/2000 2006 1001
3005 5160.45 10/3/2000 2003 1002

Предолжение WHERE фильтрует строки до того, как они будут сгруппированы до GROUP BY. WHERE принимается к отждльным строкам, поэтому его нельзя использовать агрегатные ф-ии, т.к. агрегатные используется с группами.

4. 
SELECT snum, MAX(amt)
FROM Orders
WHERE odate = '10-3-2010'
GROUP BY snum;

3003  767.19 10/3/2000 2001 1001
3005 5160.45 10/3/2000 2003 1002
3002 1900.10 10/3/2000 2007 1004
3006 1098.16 10/3/2000 2008 1007

5.
SELECT snum, MAX(amt)
FROM Orders
GROUP BY snum
HAVING snum IN (1002, 1007)

3005 5160.45 10/3/2000 2003 1002
3006 1098.16 10/3/2000 2008 1007



11:17 14.12.2017 Вложенные запросы

1. Select (c Disctinct простые + предикаты);
2. Select (агрегатные ф-ии);
3. Действия с таблицами;
4. Соединения (Join) все виды;
5. Вложеные запросы.
Теория + примеры на каждую команду к своей БД.
Книга: Мартин Грабер Понимание SQL


SQL позволяет вкладывать запросы друг в друга. Как правило внутренний запрос формирут значение, которое проверяется в предикате внешнего запроса. 

SELECT *
FROM Orders
Where snum = 
	(SELECT snum
	FROM Salespeople
	WHERE SNAME = 'Motika');



17:04 18.12.2017
Соединение таблиц
JOIN:
 - INNER;
 - OUTER;

1. 
SELECT Auto
[INNER] JOIN Selling ON
Auto.id = Selling

Auto		Selling
id	name	id	sname
1	bmv	1	250
2	opel	5	450
3	MB	3	300
4	audi	6	400

2. Соединение таблиц, если есть пересечения (по условию) 
FULL OUTER JOIN
SELECT *
FROM Auto
FULL OUTER JOIN
Selling ON Auto.id = Selling.id

3. Включаем по параметрам левой таблицы
LEFT [OUTER] JOIN 
SELECT *
FROM Auto
LEFT OUTER JOIN
Selling ON Auto.id = Selling.id

4. Все комбинации между с таблицами 
SELECT *
FROM Auto
CROSS OUTER JOIN
Selling ON Auto.id = Selling.id

Пример:
SELECT Customers.cname, Salespeople.sname
FROM Customers, Salespeople
WHERE Salespeople.snum = Customers.snum; 

При присоединении таблис SQL просматривает все возможные комбинации строк, беря по одной строке из каждой таблицы, где происходит проверка на соответствие предикату как отдельные строки в однотбличном запросе.

СУБД сначала берет одну строку из одной таблицы, а потом объединяет ее с каждой из строк другой таблицы и проверяет на соответствие предикату.



9:47 21.12.2017
Создать запросы:
1. Выводит имя покупателя и его номер заказа
SELECT Customers.Cname, Orders.Onum
FROM Customers, Orgers
Where Customers.Cnum = Orders.Cnum

2.Все продавцы с комиссионными больше 12% и вывод имени покупателя, имя продавца и комиссионные
SELECT Salespeople.Sname, Customers.Cname, Salespeople.Comm
FROM Salespeople, Customers
Where Salespeople.Snum = Customers.snum and Customers.Comm >  12

Соединение таблиц
1. Выводит имя покупателя и его номер заказа
SELECT Customers.Cname, Orders.Onum
FROM Customers, Orgers
Where Customers.Cnum = Orders.Cnum
При естественном соединении СУБД, сначала берется Ппервая строка Customers и соединяет ее с Orders, если условие выполняется, то строка выводится.

Необходимо узгнать, кто живет в барселоне, вывести имена продавца, покупателя, города.
Select Customers.Cname, Salespeople.Oname, Salespeople.City
From Customers, Salespeople
Where (Customers.City in ('Barcelona','London')) 
and (Customers.City = Salespeople.City);

Выполнить поиск всех покупателей, имеющих один рейтинг
SELECT first.cname, second.cname, first.cname
FROM Customers first, Customers second
WHERE first.rating = second.rating

